// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "miniproject2/entities"

	mock "github.com/stretchr/testify/mock"
)

// AdminInterfaceRepo is an autogenerated mock type for the AdminInterfaceRepo type
type AdminInterfaceRepo struct {
	mock.Mock
}

// CreateAdmin provides a mock function with given fields: admin
func (_m *AdminInterfaceRepo) CreateAdmin(admin *entities.Admin) (*entities.Admin, error) {
	ret := _m.Called(admin)

	var r0 *entities.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Admin) (*entities.Admin, error)); ok {
		return rf(admin)
	}
	if rf, ok := ret.Get(0).(func(*entities.Admin) *entities.Admin); ok {
		r0 = rf(admin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Admin)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Admin) error); ok {
		r1 = rf(admin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAdmin provides a mock function with given fields: email
func (_m *AdminInterfaceRepo) DeleteAdmin(email string) (interface{}, error) {
	ret := _m.Called(email)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdminsById provides a mock function with given fields: id
func (_m *AdminInterfaceRepo) GetAdminsById(id uint) (entities.Admin, error) {
	ret := _m.Called(id)

	var r0 entities.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entities.Admin, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) entities.Admin); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Admin)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginByUsername provides a mock function with given fields: username
func (_m *AdminInterfaceRepo) LoginByUsername(username string) (entities.Admin, error) {
	ret := _m.Called(username)

	var r0 entities.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entities.Admin, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) entities.Admin); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(entities.Admin)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAdmin provides a mock function with given fields: admin
func (_m *AdminInterfaceRepo) UpdateAdmin(admin *entities.Admin) (interface{}, error) {
	ret := _m.Called(admin)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Admin) (interface{}, error)); ok {
		return rf(admin)
	}
	if rf, ok := ret.Get(0).(func(*entities.Admin) interface{}); ok {
		r0 = rf(admin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Admin) error); ok {
		r1 = rf(admin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAdminInterfaceRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdminInterfaceRepo creates a new instance of AdminInterfaceRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdminInterfaceRepo(t mockConstructorTestingTNewAdminInterfaceRepo) *AdminInterfaceRepo {
	mock := &AdminInterfaceRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
